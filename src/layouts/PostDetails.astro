---
import Datetime from "@components/Datetime";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import Layout from "@layouts/Layout.astro";
import slugify, { slugifyStr } from "@utils/slugify";
import type { CollectionEntry } from "astro:content";
import Chat from "./ask/Chat.tsx";
import { splitWords } from "./ask/split-words";

export interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;

const {
  title,
  author,
  description,
  ogImage,
  canonicalURL,
  pubDatetime,
  tags,
  minutesRead,
} = post.data;
const id = slugify(post);

const { Content } = await post.render();
const ogUrl = new URL(ogImage ? ogImage : `${title}.png`, Astro.url.origin)
  .href;
const devMode = import.meta.env.DEV;
---

{devMode && <Chat client:only post={slugify(post)} />}

<Layout
  title={title}
  author={author}
  description={description}
  ogImage={ogUrl}
  canonicalURL={canonicalURL}
  article={{
    publishedTime: pubDatetime?.toISOString(),
    authors: [author],
    tags,
    section: "Technology",
  }}
>
  <main class="w-full px-4 sm:px-12 2xl:pl-20">
    <Datetime
      datetime={pubDatetime}
      minutesRead={minutesRead}
      size="lg"
      className="my-2 max-w-2xl"
    />
    <h1
      class="mt-4 max-w-2xl text-6xl font-semibold text-skin-accent md:text-6xl"
    >
      {title}
    </h1>
    <p class="my-4 max-w-2xl text-lg text-slate-500 md:text-xl">
      {description}
    </p>

    <div class="mt-20"></div>
    <article
      id="article"
      role="article"
      class="prose w-full max-w-full justify-between [word-spacing:.08em] prose-code:font-[monospace] xl:max-w-3xl"
    >
      <Content />
    </article>
    <!-- <article
      id="article"
      role="article"
      class="prose flex max-w-full justify-between [word-spacing:.08em] prose-code:font-[monospace]"
    >
      <div class="w-full xl:max-w-2xl">
        <Content />
      </div>
      <aside
        class="relative hidden w-1/3 list-inside pl-0 text-sm text-gray-700 transition-[margin-top] lg:block"
      >
      </aside>
    </article> -->

    <ul class="my-8">
      {tags.map(tag => <Tag name={slugifyStr(tag)} />)}
    </ul>
    <div
      id="section-highlighter"
      class="absolute -z-10 rounded border border-slate-400 transition-all"
    >
    </div>
  </main>

  <script define:vars={{ id }}>
    document.addEventListener("DOMContentLoaded", function () {
      const articleEl = document.getElementById("article");
      articleEl?.querySelectorAll("a").forEach(anchorEl => {
        const link = anchorEl.getAttribute("href") ?? "";
        const isOutboundLink =
          link.startsWith("http") && !link.startsWith(window.location.origin);
        const eventName = isOutboundLink ? "OutboundLink" : "InternalLink";
        anchorEl.addEventListener("click", () => {
          window.fathom.trackEvent(eventName, {
            props: {
              href: link,
              blog: id,
            },
          });
        });
      });
    });
  </script>
  <!-- <script is:inline type="module">
    const asideEl = document.querySelector(`aside`);
    if (asideEl) {
      const tableOfContentHeadingEl =
        document.querySelector(`#table-of-content`);
      const tableOfContentEl = document.querySelector(`#table-of-content + ul`);
      if (tableOfContentHeadingEl && tableOfContentEl) {
        asideEl.appendChild(tableOfContentHeadingEl);
        asideEl.appendChild(tableOfContentEl);
      }
    }
  </script>
  <script is:inline type="module">
    const tableOfContent = document.querySelector(`aside`);
    function setTableOfContentPosition() {
      const article = document.getElementById(`article`);
      const header = document.getElementById(`header`);
      if (!article || !header || !tableOfContent) return;

      const scrollPosition = document.documentElement.scrollTop;
      const articleDistanceToTop = article.offsetTop - header.clientHeight;
      const scrollReachedArticle = scrollPosition > articleDistanceToTop;

      const articleOffsetToTop = scrollReachedArticle
        ? scrollPosition + header.clientHeight - article.offsetTop
        : 0;

      tableOfContent.style.setProperty(
        "--table-of-content-top",
        scrollReachedArticle ? `1.5rem` : "0"
      );
      tableOfContent.style.top = `${articleOffsetToTop}px`;
    }

    setTableOfContentPosition();
    window.addEventListener("scroll", setTableOfContentPosition);

    window.addEventListener("DOMContentLoaded", () => {
      const observer = new IntersectionObserver(entries => {
        let lastEl = null;
        const tableOfContent = document.querySelector(`#table-of-content + ul`);
        const children = tableOfContent.querySelectorAll(`li a`);
        entries.forEach(entry => {
          const id = entry.target.getAttribute("id");
          const element = tableOfContent.querySelector(`li a[href="#${id}"]`);
          const heading = entry.target;

          if (!element) return;
          if (!entry.isIntersecting) return;

          // TODO: move this logic to use scroll event instead of intersection observer
          // because the intersection observer only fires when the element is visible/intersected and otherwise

          // const center = window.innerHeight / 2;
          // const headingTop = heading.getBoundingClientRect().top;
          // const headingBottom = heading.getBoundingClientRect().bottom;
          // const headingCenter = headingTop + (headingBottom - headingTop) / 2;

          // // if the intersected heading is not in the center
          // // of the screen then keep the last heading active.

          // if (headingCenter > center) return;

          children.forEach(child => {
            if (child !== element) {
              child.classList.remove("active");
            }
          });
          element.classList.add("active");
        });
      });

      // Track all sections that have an `id` applied
      document.querySelectorAll("h2,h3,h4").forEach(section => {
        observer.observe(section);
      });
    });
  </script> -->
  <script>
    import { splitWords } from "./ask/split-words";

    (() => {
      const article = document.querySelector("article");
      if (!article) {
        return;
      }

      function spanify(
        el: Element,
        ignore: (node: ChildNode) => boolean = () => false
      ) {
        if (ignore(el)) {
          return;
        }

        for (const node of el.childNodes) {
          if (node.nodeType === Node.TEXT_NODE) {
            const spans = splitWords(node.textContent ?? "").map(word => {
              const span = document.createElement("span");
              span.textContent = word;
              return span;
            });
            setTimeout(() => {
              node.replaceWith(...spans);
            });
          } else if (node.nodeType === Node.ELEMENT_NODE) {
            spanify(node as Element, ignore);
          }
        }
      }

      const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          const { target, isIntersecting } = entry;
          if (
            isIntersecting &&
            target.classList.contains("spanned") === false
          ) {
            target.classList.add("spanned");
            spanify(
              target,
              node =>
                node.nodeType === Node.ELEMENT_NODE &&
                (Array.from((node as Element).classList) ?? []).includes(
                  "expressive-code"
                )
            );
          }
        });
      });

      document.querySelectorAll("article > *").forEach(directChild => {
        observer.observe(directChild);
      });

      let lastElement: Element | null;
      const cssClass = "text-green-500";
      article.addEventListener("mousemove", function (event) {
        const x = event.clientX;
        const y = event.clientY;
        const element = document.elementFromPoint(x, y);

        if (element?.tagName === "SPAN") {
          if (lastElement !== element) {
            element.classList.add(cssClass);
          }
        }

        lastElement = element;
      });
    })();
  </script>

  <script>
    (() => {
      const highligher = document.querySelector(
        "#section-highlighter"
      ) as HTMLElement;
      const article = document.querySelector("article");
      if (!article || !highligher) {
        return;
      }
      const headings = Array.from(article.querySelectorAll("h3"));

      window.addEventListener("scroll", () => {
        const [firstVisibleHeading] = headings.filter(isInViewport);
        let nextHeading =
          firstVisibleHeading?.nextElementSibling as HTMLElement;
        const sections: HTMLElement[] = [firstVisibleHeading];
        while (nextHeading?.tagName.startsWith("H") === false) {
          sections.push(nextHeading as HTMLElement);
          nextHeading = nextHeading?.nextElementSibling as HTMLElement;
        }
        if (!firstVisibleHeading) return;
        adjustHighlighter(firstVisibleHeading, nextHeading, sections);
      });

      function isInViewport(element: HTMLElement) {
        const rect = element.getBoundingClientRect();
        return (
          rect.top >= 0 &&
          rect.left >= 0 &&
          rect.bottom <=
            (window.innerHeight || document.documentElement.clientHeight) &&
          rect.right <=
            (window.innerWidth || document.documentElement.clientWidth)
        );
      }

      function adjustHighlighter(
        firstVisibleHeading: HTMLElement,
        nextHeading: HTMLElement,
        sections: HTMLElement[]
      ) {
        const height = nextHeading.offsetTop - firstVisibleHeading.offsetTop;
        const width = Math.max(...sections.map(section => section.clientWidth));
        const top = firstVisibleHeading.offsetTop;
        const left = firstVisibleHeading.offsetLeft;
        const paddingHorz = 32;
        const paddingTop = 8;
        highligher.style.setProperty("height", `${height + paddingTop}px`);
        highligher.style.setProperty("width", `${width + paddingHorz}px`);
        highligher.style.setProperty("top", `${top - paddingTop * 2}px`);
        highligher.style.setProperty("left", `${left - paddingHorz / 2}px`);
      }
    })();
  </script>
</Layout>
 ./ask/Chat.tsx
