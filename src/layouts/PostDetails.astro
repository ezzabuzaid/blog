---
import Datetime from "@components/Datetime";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import Layout from "@layouts/Layout.astro";
import { slugifyStr } from "@utils/slugify";
import type { CollectionEntry } from "astro:content";
import "sidebarjs/lib/sidebarjs.css";

export interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;

const {
  title,
  author,
  description,
  ogImage,
  canonicalURL,
  pubDatetime,
  tags,
  minutesRead,
} = post.data;

const { Content } = await post.render();
const ogUrl = new URL(ogImage ? ogImage : `${title}.png`, Astro.url.origin)
  .href;
---

<Layout
  title={title}
  author={author}
  description={description}
  ogImage={ogUrl}
  canonicalURL={canonicalURL}
  article={{
    publishedTime: pubDatetime?.toISOString(),
    authors: [author],
    tags,
    section: "Technology",
  }}
>
  <main class="w-full 2xl:px-64 lg:px-12 px-[var(--center-padding)]">
    <Datetime
      datetime={pubDatetime}
      minutesRead={minutesRead}
      size="lg"
      className="my-2 max-w-2xl"
    />
    <h1
      class="md:text-6xl mt-4 text-6xl font-semibold text-skin-accent max-w-2xl"
    >
      {title}
    </h1>
    <p class="md:text-xl text-lg my-4 text-slate-500 max-w-2xl">
      {description}
    </p>

    <article
      id="article"
      role="article"
      class="[word-spacing:.08em] prose prose-code:font-[monospace] mt-20 max-w-full"
    >
      <div>
        <Content />
      </div>
      <aside></aside>
    </article>

    <ul class="my-8">
      {tags.map(tag => <Tag name={slugifyStr(tag)} />)}
    </ul>
    <!-- <NewsLetter /> -->
    <div class="fixed right-4 bottom-8 flex flex-col space-y-4 mb-12">
      <!-- <a
      href="#"
      class="filter grayscale flex transform items-center justify-center rounded-md transition duration-200 ease-out hover:-translate-y-1"
    >
      <span class="text-white text-6xl transition duration-200 ease-out"
        >⬆️</span
      >
    </a> -->
      <button
        id="subscribe-button"
        class="shadow-xl uppercase bg-blue-700 font-medium flex items-center text-white px-3.5 py-2.5 rounded-full hover:bg-blue-600 focus:outline-none focus:bg-blue-700"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="fill-white"
          height="24"
          viewBox="0 -960 960 960"
          width="24"
        >
          <path
            d="M160-160q-33 0-56.5-23.5T80-240v-480q0-33 23.5-56.5T160-800h640q33 0 56.5 23.5T880-720v480q0 33-23.5 56.5T800-160H160Zm320-280L160-640v400h640v-400L480-440Zm0-80 320-200H160l320 200ZM160-640v-80 480-400Z"
          ></path>
        </svg>

        <span class="ml-1 hidden sm:block">Subscribe</span>
      </button>
    </div>
    <Footer />
  </main>

  <script define:vars={{ title }}>
    document.addEventListener("DOMContentLoaded", function () {
      const articleEl = document.getElementById("article");
      articleEl?.querySelectorAll("a").forEach(anchorEl => {
        const link = anchorEl.getAttribute("href") ?? "";
        const isOutboundLink =
          link.startsWith("http") && !link.startsWith(window.location.origin);
        const eventName = isOutboundLink ? "OutboundLink" : "InternalLink";
        anchorEl.addEventListener("click", () => {
          console.log(eventName, link);
          window.plausible(eventName, {
            props: {
              href: link,
              blog: title,
            },
          });
        });
      });

      document
        .getElementById("subscribe-button")
        ?.addEventListener("click", () => {
          window.plausible("Subscribe", {
            props: {
              blog: title,
            },
          });

          // scroll to newsletter-section
          const newsletterSection =
            document.getElementById("newsletter-section");
          newsletterSection?.scrollIntoView({ behavior: "smooth" });
        });
    });
  </script>
  <!-- <script is:inline>
    console.log(document.querySelector(`aside`));
    document
      .querySelector(`aside`)
      .appendChild(document.querySelector(`#table-of-content`));
  </script> -->
  <script is:inline>
    function setTableOfContentPosition() {
      const article = document.querySelector(`#article`);
      const header = document.querySelector(`#header`);
      const tableOfContent = document.querySelector(`#table-of-content + ul`);
      if (!tableOfContent) return;
      const marginTop = 24;

      const scrollPosition = document.documentElement.scrollTop;
      const articleDistanceToTop = article.offsetTop - header.clientHeight;
      const scrollReachedArticle = scrollPosition > articleDistanceToTop;

      const articleOffsetToTop = scrollReachedArticle
        ? scrollPosition + header.clientHeight
        : article.offsetTop;
      // 0;

      // if (!scrollReachedArticle) {
      //   article.style.setProperty("position", "relative");
      // } else {
      //   article.style.setProperty("position", "static");
      // }

      tableOfContent.style.setProperty(
        "--table-of-content-top",
        scrollReachedArticle ? `1.5rem` : 0
      );

      tableOfContent.style.transform = `translate(0, ${articleOffsetToTop}px)`;
    }
    setTableOfContentPosition();

    window.addEventListener("scroll", () => {
      setTableOfContentPosition();
    });

    window.addEventListener("DOMContentLoaded", () => {
      const observer = new IntersectionObserver(entries => {
        let lastEl = null;
        entries.forEach(entry => {
          const tableOfContent = document.querySelector(
            `#table-of-content + ul`
          );
          const id = entry.target.getAttribute("id");
          const element = tableOfContent.querySelector(`li a[href="#${id}"]`);
          const children = tableOfContent.querySelectorAll(`li a`);

          if (!element) return;
          if (!entry.isIntersecting) return;

          children.forEach(child => {
            if (child !== element) {
              child.classList.remove("active");
            }
          });
          element.classList.add("active");
        });
      });

      // Track all sections that have an `id` applied
      document.querySelectorAll("h2,h3,h4").forEach(section => {
        observer.observe(section);
      });
    });
  </script>
  <script is:inline>
    function setPadding() {
      const padding = window.innerWidth / 2 / 2 / 2;
      document.documentElement.style.setProperty(
        "--center-padding",
        `${Math.floor(padding / 16)}rem`
      );
    }
    setPadding();
    window.addEventListener("resize", setPadding);
  </script>
</Layout>
